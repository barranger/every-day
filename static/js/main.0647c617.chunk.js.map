{"version":3,"sources":["data/quotes.js","screens/Splash/Splash.js","screens/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["quotes","author","text","Splash","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","index","Math","floor","random","Quotes","length","quote","state","setTimeout","history","push","react_default","a","createElement","className","Component","withRouter","Home","App","BrowserRouter","basename","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAAeA,EAAA,CACb,CACEC,OAAQ,gBACRC,KAAM,uDAER,CACED,OAAQ,YACRC,KAAM,yCAER,CACED,OAAQ,aACRC,KAAM,mDAER,CACED,OAAQ,gBACRC,KAAM,uGAER,CACED,OAAQ,gBACRC,KAAM,sDCbJC,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,OACA,IAAII,EAAQC,KAAKC,MAAMD,KAAKE,SAAWC,EAAOC,QAC1CC,EAAQF,EAAOJ,GAHF,OAIjBP,EAAKc,MAAQ,CAAED,SAEfE,WAAW,WACThB,EAAMiB,QAAQC,KAAK,UAAY,KAPhBjB,wEAWjB,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAChBH,EAAAC,EAAAC,cAAA,UACGjB,KAAKW,MAAMD,MAAMhB,KAClBqB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,iBAASjB,KAAKW,MAAMD,MAAMjB,kBAlBjB0B,cAgCNC,cAAWzB,GCrBX0B,0LAVX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAChBH,EAAAC,EAAAC,cAAA,8CAPSE,sCCgBJG,mLAXX,OACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,SAAS,aACfT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjCoB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWP,aANvBF,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0647c617.chunk.js","sourcesContent":["export default [\n  {\n    author: \"Carol Burnett\",\n    text: \"Only I can change my life. No one can do it for me.\"\n  },\n  {\n    author: \"Aristotle\",\n    text: \"Quality is not an act, it is a habit.\"\n  },\n  {\n    author: \"Mark Twain\",\n    text: \"The secret of getting ahead is getting started.\"\n  },\n  {\n    author: \"Aldous Huxley\",\n    text: \"There is only one corner of the universe you can be certain of improving, and that's your own self.\"\n  },\n  {\n    author: \"Ralph Marston\",\n    text: \"What you do today can improve all your tomorrows.\"\n  },\n];","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport {withRouter} from 'react-router';\nimport Quotes from \"../../data/quotes\";\nimport \"./Splash.css\";\n\nclass Splash extends Component {\n  constructor(props) {\n    super();\n    var index = Math.floor(Math.random() * Quotes.length);\n    var quote = Quotes[index];\n    this.state = { quote };\n    \n    setTimeout(() => { \n      props.history.push(\"/Home\") }, 3000) \n  }\n\n  render() {\n    return (\n      <div className=\"Splash\">\n        <header className=\"Splash-header\">\n          <h2>\n            {this.state.quote.text}\n            <br />\n            <small>~{this.state.quote.author}</small>\n          </h2>\n        </header>\n      </div>\n    );\n  }\n}\n\nSplash.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n};\n\nexport default withRouter(Splash);","import React, { Component } from \"react\";\nimport \"./Home.css\";\n\nclass Home extends Component {\n  \n\n  render() {\n    return (\n      <div className=\"Home\">\n        <header className=\"Home-header\">\n          <h2>This is the Home header</h2>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport Splash from \"./screens/Splash/Splash\";\nimport Home from \"./screens/Home/Home\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename=\"every-day\">\n        <div>\n          <Route exact path=\"/\" component={Splash} />\n          <Route path=\"/Home\" component={Home} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}